---

- name: Downloading package dependencies (apt)
  ansible.builtin.apt:
    name: "{{ kube_worker_apt_dependencies }}"
    state: present
    force: true

- name: Downloading kubelet and kube-proxy
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/v{{ kube_worker_version }}/bin/linux/amd64/{{ item }}"
    dest: '/usr/local/bin'
    mode: '0744'
  with_items:
    - kube-proxy
    - kubelet
  notify:
    - "Restart kube-proxy service"
    - "Restart kubelet service"

- name: Downloading Container Network Interface (CNI)
  ansible.builtin.get_url:
    url: "https://github.com/containernetworking/plugins/releases/download/v0.9.1/cni-plugins-linux-amd64-v0.9.1.tgz"
    dest: '/tmp'
  notify:
    - "Restart kube-proxy service"
    - "Restart kubelet service"

- name: Creating Container Network Interface (CNI) binaries directory
  ansible.builtin.file:
    path: "/opt/cni/bin"
    state: directory

- name: Creating Container Network Interface (CNI) configuration directory
  ansible.builtin.file:
    path: "/etc/cni/net.d"
    state: directory

- name: Unarchiving Container Network Interface (CNI)
  ansible.builtin.unarchive:
    src: "/tmp/cni-plugins-linux-amd64-v0.9.1.tgz"
    dest: "/opt/cni/bin"
    remote_src: yes

- name: kubelet - Copying Container Network Interface (CNI) bridge configuration
  ansible.builtin.template:
    src: "cni-10-bridge.conf.j2"
    dest: "/etc/cni/net.d/10-bridge.conf"
  notify:
    - "Restart kubelet service"

- name: kubelet - Copying Container Network Interface (CNI) loopback configuration
  ansible.builtin.template:
    src: "cni-99-loopback.conf.j2"
    dest: "/etc/cni/net.d/99-loopback.conf"
  notify:
    - "Restart kubelet service"

- name: Disabling swap memory
  ansible.builtin.command: "swapoff -a"

- name: Disabling SWAP in fstab permanently
  replace:
    path: /etc/fstab
    regexp: '^([^#].*?\sswap\s+sw\s+.*)$'
    replace: '# \1'

- name: kubelet - Copying Certificate public key
  ansible.builtin.copy:
    src: "worker-1.pem"
    dest: "/var/lib/kubernetes/kubelet/"
  notify:
    - "Restart kubelet service"

- name: kubelet - Copying Certificate private key
  ansible.builtin.copy:
    src: "worker-1-key.pem"
    dest: "/var/lib/kubernetes/kubelet/"
  notify:
    - "Restart kubelet service"

- name: kubelet - Copying Certificate Authority public key
  ansible.builtin.copy:
    src: "ca.pem"
    dest: "/var/lib/kubernetes/"
  notify:
    - "Restart kubelet service"

- name: kubelet - Copy kubelet configuration file
  ansible.builtin.template:
    src: "kubelet-config.yaml.j2"
    dest: "/var/lib/kubernetes/kubelet/config.yaml"
  notify:
    - "Restart kubelet service"

- name: kubelet - Setting config cluster (kubectl config)
  ansible.builtin.command: "kubectl config set-cluster {{ cluster_name }} \
    --certificate-authority=/var/lib/kubernetes/ca.pem \
    --embed-certs=true \
    --server=https://{{ ansible_host }}:6443 \
    --kubeconfig=/var/lib/kubernetes/kubelet/kubeconfig"

- name: kubelet - Setting config credentials (kubectl config)
  ansible.builtin.command: "kubectl config set-credentials system:node:worker-1 \
    --client-certificate=/var/lib/kubernetes/kubelet/worker-1.pem \
    --client-key=/var/lib/kubernetes/kubelet/worker-1-key.pem \
    --embed-certs=true \
    --kubeconfig=/var/lib/kubernetes/kubelet/kubeconfig"

- name: kubelet - Setting config context (kubectl config)
  ansible.builtin.command: "kubectl config set-context default \
    --cluster={{ cluster_name }} \
    --user=system:node:worker-1 \
    --kubeconfig=/var/lib/kubernetes/kubelet/kubeconfig"

- name: kubelet - Setting config current context (kubectl config)
  ansible.builtin.command: "kubectl config use-context default \
    --kubeconfig=/var/lib/kubernetes/kubelet/kubeconfig"

- name: kubelet - Copy service configuration file (systemd)
  ansible.builtin.template:
    src: "kubelet.service.j2"
    dest: "/etc/systemd/system/kubelet.service"
  notify:
    - "Restart kubelet service"

- name: kube-proxy - Creating kube proxy directory
  ansible.builtin.file:
    path: "/var/lib/kubernetes/kube-proxy"
    state: directory

- name: kube-proxy - Copying Certificate public key
  ansible.builtin.copy:
    src: "kube-proxy.pem"
    dest: "/var/lib/kubernetes/kube-proxy/cert.pem"
  notify:
    - "Restart kube-proxy service"

- name: kube-proxy - Copying Certificate private key
  ansible.builtin.copy:
    src: "kube-proxy-key.pem"
    dest: "/var/lib/kubernetes/kube-proxy/cert-key.pem"
  notify:
    - "Restart kube-proxy service"

- name: kube-proxy - Copy configuration file
  ansible.builtin.template:
    src: "kube-proxy-config.yaml.j2"
    dest: "/var/lib/kubernetes/kube-proxy/config.yaml"
  notify:
    - "Restart kube-proxy service"

- name: kube-proxy - Copy service configuration file (systemd)
  ansible.builtin.template:
    src: "kube-proxy.service.j2"
    dest: "/etc/systemd/system/kube-proxy.service"
  notify:
    - "Restart kube-proxy service"

- name: kube-proxy - Setting config cluster (kubectl config)
  ansible.builtin.command: "kubectl config set-cluster {{ cluster_name }} \
    --certificate-authority=/var/lib/kubernetes/ca.pem \
    --embed-certs=true \
    --server=https://{{ ansible_host }}:6443 \
    --kubeconfig=/var/lib/kubernetes/kube-proxy/kubeconfig"

- name: kube-proxy - Setting config credentials (kubectl config)
  ansible.builtin.command: "kubectl config set-credentials system:kube-proxy \
    --client-certificate=/var/lib/kubernetes/kube-proxy/cert.pem \
    --client-key=/var/lib/kubernetes/kube-proxy/cert-key.pem \
    --embed-certs=true \
    --kubeconfig=/var/lib/kubernetes/kube-proxy/kubeconfig"

- name: kube-proxy - Setting config context (kubectl config)
  ansible.builtin.command: "kubectl config set-context default \
    --cluster={{ cluster_name }} \
    --user=system:kube-proxy \
    --kubeconfig=/var/lib/kubernetes/kube-proxy/kubeconfig"

- name: kube-proxy - Setting config current context (kubectl config)
  ansible.builtin.command: "kubectl config use-context default \
    --kubeconfig=/var/lib/kubernetes/kube-proxy/kubeconfig"

- name: Starting kubelet service (systemd)
  ansible.builtin.systemd:
    name: kubelet
    state: started
    daemon_reload: yes

- name: Starting kube-proxy service (systemd)
  ansible.builtin.systemd:
    name: kube-proxy
    state: started
    daemon_reload: yes

- name: Flush kube-proxy and kubelet handlers
  ansible.builtin.meta: flush_handlers

- name: Waiting for the services startup
  ansible.builtin.pause:
    seconds: 8

- name: Ensuring that kubelet is running /healthz
  ansible.builtin.command: "curl -X GET http://127.0.0.1:10248/healthz"
  tags:
    - test

- name: Ensuring that kube-proxy is running /healthz
  ansible.builtin.command: "curl -X GET http://127.0.0.1:10256/healthz"
  tags:
    - test
